// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	contextx "github.com/blackhorseya/gocommon/pkg/contextx"
	mock "github.com/stretchr/testify/mock"

	user "github.com/blackhorseya/user-app/internal/pkg/entity/user"
)

// IRepo is an autogenerated mock type for the IRepo type
type IRepo struct {
	mock.Mock
}

// GetUserByOpenID provides a mock function with given fields: ctx, provider, id
func (_m *IRepo) GetUserByOpenID(ctx contextx.Contextx, provider string, id string) (*user.Profile, error) {
	ret := _m.Called(ctx, provider, id)

	var r0 *user.Profile
	if rf, ok := ret.Get(0).(func(contextx.Contextx, string, string) *user.Profile); ok {
		r0 = rf(ctx, provider, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Profile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, string, string) error); ok {
		r1 = rf(ctx, provider, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByToken provides a mock function with given fields: ctx, token
func (_m *IRepo) GetUserByToken(ctx contextx.Contextx, token string) (*user.Profile, error) {
	ret := _m.Called(ctx, token)

	var r0 *user.Profile
	if rf, ok := ret.Get(0).(func(contextx.Contextx, string) *user.Profile); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Profile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: ctx, newUser
func (_m *IRepo) RegisterUser(ctx contextx.Contextx, newUser *user.Profile) (*user.Profile, error) {
	ret := _m.Called(ctx, newUser)

	var r0 *user.Profile
	if rf, ok := ret.Get(0).(func(contextx.Contextx, *user.Profile) *user.Profile); ok {
		r0 = rf(ctx, newUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Profile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, *user.Profile) error); ok {
		r1 = rf(ctx, newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, newUser
func (_m *IRepo) UpdateUser(ctx contextx.Contextx, newUser *user.Profile) (*user.Profile, error) {
	ret := _m.Called(ctx, newUser)

	var r0 *user.Profile
	if rf, ok := ret.Get(0).(func(contextx.Contextx, *user.Profile) *user.Profile); ok {
		r0 = rf(ctx, newUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Profile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, *user.Profile) error); ok {
		r1 = rf(ctx, newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
