// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	contextx "github.com/blackhorseya/gocommon/pkg/contextx"
	mock "github.com/stretchr/testify/mock"

	user "github.com/blackhorseya/user-app/internal/pkg/entity/user"
)

// IBiz is an autogenerated mock type for the IBiz type
type IBiz struct {
	mock.Mock
}

// Callback provides a mock function with given fields: ctx, code
func (_m *IBiz) Callback(ctx contextx.Contextx, code string) (*user.Profile, error) {
	ret := _m.Called(ctx, code)

	var r0 *user.Profile
	if rf, ok := ret.Get(0).(func(contextx.Contextx, string) *user.Profile); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Profile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoginURL provides a mock function with given fields: ctx, state
func (_m *IBiz) GetLoginURL(ctx contextx.Contextx, state string) string {
	ret := _m.Called(ctx, state)

	var r0 string
	if rf, ok := ret.Get(0).(func(contextx.Contextx, string) string); ok {
		r0 = rf(ctx, state)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetUserByToken provides a mock function with given fields: ctx, token
func (_m *IBiz) GetUserByToken(ctx contextx.Contextx, token string) (*user.Profile, error) {
	ret := _m.Called(ctx, token)

	var r0 *user.Profile
	if rf, ok := ret.Get(0).(func(contextx.Contextx, string) *user.Profile); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Profile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasPermission provides a mock function with given fields: ctx, token, obj, act
func (_m *IBiz) HasPermission(ctx contextx.Contextx, token string, obj string, act string) (bool, error) {
	ret := _m.Called(ctx, token, obj, act)

	var r0 bool
	if rf, ok := ret.Get(0).(func(contextx.Contextx, string, string, string) bool); ok {
		r0 = rf(ctx, token, obj, act)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, string, string, string) error); ok {
		r1 = rf(ctx, token, obj, act)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
