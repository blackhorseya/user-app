// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/blackhorseya/gocommon/pkg/config"
	"github.com/blackhorseya/gocommon/pkg/log"
	"github.com/blackhorseya/user-app/internal/app/user"
	"github.com/blackhorseya/user-app/internal/app/user/api/restful"
	auth2 "github.com/blackhorseya/user-app/internal/app/user/api/restful/auth"
	health2 "github.com/blackhorseya/user-app/internal/app/user/api/restful/health"
	"github.com/blackhorseya/user-app/internal/app/user/biz"
	"github.com/blackhorseya/user-app/internal/app/user/biz/auth"
	repo2 "github.com/blackhorseya/user-app/internal/app/user/biz/auth/repo"
	"github.com/blackhorseya/user-app/internal/app/user/biz/health"
	"github.com/blackhorseya/user-app/internal/app/user/biz/health/repo"
	"github.com/blackhorseya/user-app/internal/pkg/app"
	"github.com/blackhorseya/user-app/internal/pkg/infra/authenticator"
	"github.com/blackhorseya/user-app/internal/pkg/infra/databases"
	"github.com/blackhorseya/user-app/internal/pkg/infra/jwt"
	"github.com/blackhorseya/user-app/internal/pkg/infra/transports/http"
	"github.com/google/wire"
)

// Injectors from wire.go:

func CreateApp(path2 string) (*app.Application, error) {
	viper, err := config.New(path2)
	if err != nil {
		return nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, err
	}
	userOptions, err := user.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	httpOptions, err := http.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	databasesOptions, err := databases.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	client, err := databases.NewMongo(databasesOptions)
	if err != nil {
		return nil, err
	}
	iRepo := repo.NewImpl(logger, client)
	iBiz := health.NewImpl(logger, iRepo)
	iHandler := health2.NewImpl(logger, iBiz)
	repoIRepo := repo2.NewImpl(logger, client)
	authenticatorOptions, err := authenticator.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	authenticatorAuthenticator, err := authenticator.NewImpl(authenticatorOptions)
	if err != nil {
		return nil, err
	}
	authIBiz := auth.NewImpl(logger, repoIRepo, authenticatorAuthenticator)
	authIHandler := auth2.NewImpl(logger, authIBiz)
	initHandlers := restful.CreateInitHandlerFn(iHandler, authIHandler)
	engine := http.NewRouter(httpOptions, logger, initHandlers)
	server, err := http.New(httpOptions, logger, engine)
	if err != nil {
		return nil, err
	}
	application, err := user.New(userOptions, logger, server)
	if err != nil {
		return nil, err
	}
	return application, nil
}

// wire.go:

var providerSet = wire.NewSet(user.ProviderSet, config.ProviderSet, log.ProviderSet, http.ProviderSet, databases.ProviderSet, jwt.ProviderSet, authenticator.ProviderSet, restful.ProviderSet, biz.ProviderSet)
