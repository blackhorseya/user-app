// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/blackhorseya/gocommon/pkg/config"
	"github.com/blackhorseya/gocommon/pkg/log"
	"github.com/blackhorseya/user-app/internal/app/user"
	"github.com/blackhorseya/user-app/internal/app/user/api/restful"
	"github.com/blackhorseya/user-app/internal/pkg/app"
	"github.com/blackhorseya/user-app/internal/pkg/infra/databases"
	"github.com/blackhorseya/user-app/internal/pkg/infra/transports/http"
	"github.com/google/wire"
)

// Injectors from wire.go:

func CreateApp(path2 string) (*app.Application, error) {
	viper, err := config.New(path2)
	if err != nil {
		return nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, err
	}
	userOptions, err := user.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	httpOptions, err := http.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	initHandlers := restful.CreateInitHandlerFn()
	engine := http.NewRouter(httpOptions, logger, initHandlers)
	server, err := http.New(httpOptions, logger, engine)
	if err != nil {
		return nil, err
	}
	application, err := user.New(userOptions, logger, server)
	if err != nil {
		return nil, err
	}
	return application, nil
}

// wire.go:

var providerSet = wire.NewSet(user.ProviderSet, config.ProviderSet, log.ProviderSet, http.ProviderSet, databases.ProviderSet, restful.ProviderSet)
